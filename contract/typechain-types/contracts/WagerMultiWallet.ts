/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface WagerMultiWalletInterface extends utils.Interface {
  functions: {
    "bet(uint256,uint8)": FunctionFragment;
    "betERC20(uint256,uint8,uint256)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "claimERC20(uint256)": FunctionFragment;
    "close(uint256)": FunctionFragment;
    "getOwnerCut(uint256)": FunctionFragment;
    "getWager(uint256)": FunctionFragment;
    "mintWager(uint256,uint32,string,bytes32[],address)": FunctionFragment;
    "refund(uint256,uint8)": FunctionFragment;
    "refundERC20(uint256,uint8)": FunctionFragment;
    "resolve(uint256,uint8)": FunctionFragment;
    "resolveERC20(uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bet"
      | "betERC20"
      | "cancel"
      | "claim"
      | "claimERC20"
      | "close"
      | "getOwnerCut"
      | "getWager"
      | "mintWager"
      | "refund"
      | "refundERC20"
      | "resolve"
      | "resolveERC20"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "betERC20",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimERC20",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "close",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerCut",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWager",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWager",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "refundERC20",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveERC20",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintWager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveERC20",
    data: BytesLike
  ): Result;

  events: {
    "CanceledWager(uint256)": EventFragment;
    "ClosedWager(uint256)": EventFragment;
    "MintedWager(uint256,address)": EventFragment;
    "PlacedBet(uint256,uint256,uint8)": EventFragment;
    "ResolvedWager(uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CanceledWager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosedWager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintedWager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlacedBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolvedWager"): EventFragment;
}

export interface CanceledWagerEventObject {
  index: BigNumber;
}
export type CanceledWagerEvent = TypedEvent<
  [BigNumber],
  CanceledWagerEventObject
>;

export type CanceledWagerEventFilter = TypedEventFilter<CanceledWagerEvent>;

export interface ClosedWagerEventObject {
  index: BigNumber;
}
export type ClosedWagerEvent = TypedEvent<[BigNumber], ClosedWagerEventObject>;

export type ClosedWagerEventFilter = TypedEventFilter<ClosedWagerEvent>;

export interface MintedWagerEventObject {
  index: BigNumber;
  owner: string;
}
export type MintedWagerEvent = TypedEvent<
  [BigNumber, string],
  MintedWagerEventObject
>;

export type MintedWagerEventFilter = TypedEventFilter<MintedWagerEvent>;

export interface PlacedBetEventObject {
  index: BigNumber;
  amount: BigNumber;
  outcome: number;
}
export type PlacedBetEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  PlacedBetEventObject
>;

export type PlacedBetEventFilter = TypedEventFilter<PlacedBetEvent>;

export interface ResolvedWagerEventObject {
  index: BigNumber;
  outcome: number;
}
export type ResolvedWagerEvent = TypedEvent<
  [BigNumber, number],
  ResolvedWagerEventObject
>;

export type ResolvedWagerEventFilter = TypedEventFilter<ResolvedWagerEvent>;

export interface WagerMultiWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WagerMultiWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bet(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    betERC20(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimERC20(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    close(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOwnerCut(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWager(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        number,
        number,
        BigNumber,
        number,
        BigNumber[],
        string,
        string[],
        boolean,
        string
      ] & {
        _owner: string;
        _endsAt: BigNumber;
        _vigBasisPoints: number;
        _winningOutcome: number;
        _total: BigNumber;
        _state: number;
        _totalsPerOutcome: BigNumber[];
        _proposition: string;
        _outcomes: string[];
        _isERC20: boolean;
        _erc20Token: string;
      }
    >;

    mintWager(
      _endsAt: PromiseOrValue<BigNumberish>,
      _vigBasisPoints: PromiseOrValue<BigNumberish>,
      _proposition: PromiseOrValue<string>,
      _outcomes: PromiseOrValue<BytesLike>[],
      _erc20Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refund(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refundERC20(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolve(
      index: PromiseOrValue<BigNumberish>,
      _winningOutcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveERC20(
      index: PromiseOrValue<BigNumberish>,
      _winningOutcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bet(
    index: PromiseOrValue<BigNumberish>,
    outcome: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  betERC20(
    index: PromiseOrValue<BigNumberish>,
    outcome: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimERC20(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  close(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOwnerCut(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWager(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      number,
      number,
      BigNumber,
      number,
      BigNumber[],
      string,
      string[],
      boolean,
      string
    ] & {
      _owner: string;
      _endsAt: BigNumber;
      _vigBasisPoints: number;
      _winningOutcome: number;
      _total: BigNumber;
      _state: number;
      _totalsPerOutcome: BigNumber[];
      _proposition: string;
      _outcomes: string[];
      _isERC20: boolean;
      _erc20Token: string;
    }
  >;

  mintWager(
    _endsAt: PromiseOrValue<BigNumberish>,
    _vigBasisPoints: PromiseOrValue<BigNumberish>,
    _proposition: PromiseOrValue<string>,
    _outcomes: PromiseOrValue<BytesLike>[],
    _erc20Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refund(
    index: PromiseOrValue<BigNumberish>,
    outcome: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refundERC20(
    index: PromiseOrValue<BigNumberish>,
    outcome: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolve(
    index: PromiseOrValue<BigNumberish>,
    _winningOutcome: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveERC20(
    index: PromiseOrValue<BigNumberish>,
    _winningOutcome: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bet(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    betERC20(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimERC20(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    close(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwnerCut(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWager(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        number,
        number,
        BigNumber,
        number,
        BigNumber[],
        string,
        string[],
        boolean,
        string
      ] & {
        _owner: string;
        _endsAt: BigNumber;
        _vigBasisPoints: number;
        _winningOutcome: number;
        _total: BigNumber;
        _state: number;
        _totalsPerOutcome: BigNumber[];
        _proposition: string;
        _outcomes: string[];
        _isERC20: boolean;
        _erc20Token: string;
      }
    >;

    mintWager(
      _endsAt: PromiseOrValue<BigNumberish>,
      _vigBasisPoints: PromiseOrValue<BigNumberish>,
      _proposition: PromiseOrValue<string>,
      _outcomes: PromiseOrValue<BytesLike>[],
      _erc20Address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refund(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    refundERC20(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolve(
      index: PromiseOrValue<BigNumberish>,
      _winningOutcome: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveERC20(
      index: PromiseOrValue<BigNumberish>,
      _winningOutcome: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CanceledWager(uint256)"(
      index?: PromiseOrValue<BigNumberish> | null
    ): CanceledWagerEventFilter;
    CanceledWager(
      index?: PromiseOrValue<BigNumberish> | null
    ): CanceledWagerEventFilter;

    "ClosedWager(uint256)"(
      index?: PromiseOrValue<BigNumberish> | null
    ): ClosedWagerEventFilter;
    ClosedWager(
      index?: PromiseOrValue<BigNumberish> | null
    ): ClosedWagerEventFilter;

    "MintedWager(uint256,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      owner?: null
    ): MintedWagerEventFilter;
    MintedWager(
      index?: PromiseOrValue<BigNumberish> | null,
      owner?: null
    ): MintedWagerEventFilter;

    "PlacedBet(uint256,uint256,uint8)"(
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      outcome?: null
    ): PlacedBetEventFilter;
    PlacedBet(
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      outcome?: null
    ): PlacedBetEventFilter;

    "ResolvedWager(uint256,uint8)"(
      index?: PromiseOrValue<BigNumberish> | null,
      outcome?: null
    ): ResolvedWagerEventFilter;
    ResolvedWager(
      index?: PromiseOrValue<BigNumberish> | null,
      outcome?: null
    ): ResolvedWagerEventFilter;
  };

  estimateGas: {
    bet(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    betERC20(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimERC20(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    close(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOwnerCut(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWager(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintWager(
      _endsAt: PromiseOrValue<BigNumberish>,
      _vigBasisPoints: PromiseOrValue<BigNumberish>,
      _proposition: PromiseOrValue<string>,
      _outcomes: PromiseOrValue<BytesLike>[],
      _erc20Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refund(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refundERC20(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolve(
      index: PromiseOrValue<BigNumberish>,
      _winningOutcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveERC20(
      index: PromiseOrValue<BigNumberish>,
      _winningOutcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bet(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    betERC20(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimERC20(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    close(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOwnerCut(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWager(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintWager(
      _endsAt: PromiseOrValue<BigNumberish>,
      _vigBasisPoints: PromiseOrValue<BigNumberish>,
      _proposition: PromiseOrValue<string>,
      _outcomes: PromiseOrValue<BytesLike>[],
      _erc20Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refundERC20(
      index: PromiseOrValue<BigNumberish>,
      outcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolve(
      index: PromiseOrValue<BigNumberish>,
      _winningOutcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveERC20(
      index: PromiseOrValue<BigNumberish>,
      _winningOutcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
