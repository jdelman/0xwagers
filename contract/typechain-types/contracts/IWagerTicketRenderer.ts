/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type WagerPositionStruct = {
  endsAt: PromiseOrValue<BigNumberish>;
  proposition: PromiseOrValue<string>;
  winningOutcome: PromiseOrValue<BigNumberish>;
  total: PromiseOrValue<BigNumberish>;
  state: PromiseOrValue<BigNumberish>;
  erc20Token: PromiseOrValue<string>;
  userPosition: PromiseOrValue<BigNumberish>;
  outcome: PromiseOrValue<BytesLike>;
};

export type WagerPositionStructOutput = [
  BigNumber,
  string,
  number,
  BigNumber,
  number,
  string,
  number,
  string
] & {
  endsAt: BigNumber;
  proposition: string;
  winningOutcome: number;
  total: BigNumber;
  state: number;
  erc20Token: string;
  userPosition: number;
  outcome: string;
};

export interface IWagerTicketRendererInterface extends utils.Interface {
  functions: {
    "buildSVGBase64((uint256,string,uint8,uint256,uint8,address,uint8,bytes32))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "buildSVGBase64"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buildSVGBase64",
    values: [WagerPositionStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "buildSVGBase64",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IWagerTicketRenderer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWagerTicketRendererInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buildSVGBase64(
      params: WagerPositionStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  buildSVGBase64(
    params: WagerPositionStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    buildSVGBase64(
      params: WagerPositionStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    buildSVGBase64(
      params: WagerPositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buildSVGBase64(
      params: WagerPositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
