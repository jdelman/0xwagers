/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  WagerTicket,
  WagerTicketInterface,
} from "../../contracts/WagerTicket";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "endsAt",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "proposition",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "winningOutcome",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "total",
            type: "uint256",
          },
          {
            internalType: "enum States",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "erc20Token",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "userPosition",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "outcome",
            type: "bytes32",
          },
        ],
        internalType: "struct WagerPosition",
        name: "params",
        type: "tuple",
      },
    ],
    name: "buildSVGBase64",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ce6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806350a9449914610030575b600080fd5b61004a6004803603810190610045919061073e565b610060565b604051610057919061085c565b60405180910390f35b6060600061007b836080015184604001518560c001516100b3565b905060006100a782604051602001610093919061082f565b6040516020818303038152906040526103f0565b90508092505050919050565b6060600360048111156100ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b846004811115610128577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14801561013a57508260ff168260ff16145b1561017c576040518060400160405280600681526020017f373464323666000000000000000000000000000000000000000000000000000081525090506103e9565b600360048111156101b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8460048111156101ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14801561020257508260ff168260ff1614155b15610244576040518060400160405280600681526020017f656133373530000000000000000000000000000000000000000000000000000081525090506103e9565b6001600481111561027e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8460048111156102b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156102fa576040518060400160405280600681526020017f363062316334000000000000000000000000000000000000000000000000000081525090506103e9565b60026004811115610334577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b84600481111561036d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156103b0576040518060400160405280600681526020017f353935643964000000000000000000000000000000000000000000000000000081525090506103e9565b6040518060400160405280600681526020017f656161303465000000000000000000000000000000000000000000000000000081525090505b9392505050565b60606000825114156104135760405180602001604052806000815250905061058a565b6000604051806060016040528060408152602001610c71604091399050600060036002855161044291906108fb565b61044c9190610951565b60046104589190610982565b9050600060208261046991906108fb565b67ffffffffffffffff8111156104a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156104da5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015610549576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f81168501518253600182019150506104ee565b60038951066001811461056357600281146105735761057e565b613d3d60f01b600283035261057e565b603d60f81b60018303525b50505050508093505050505b919050565b60006105a261059d846108a3565b61087e565b9050828152602081018484840111156105ba57600080fd5b6105c5848285610a2f565b509392505050565b6000813590506105dc81610c04565b92915050565b6000813590506105f181610c1b565b92915050565b60008135905061060681610c32565b92915050565b600082601f83011261061d57600080fd5b813561062d84826020860161058f565b91505092915050565b6000610100828403121561064957600080fd5b61065461010061087e565b9050600061066484828501610714565b600083015250602082013567ffffffffffffffff81111561068457600080fd5b6106908482850161060c565b60208301525060406106a484828501610729565b60408301525060606106b884828501610714565b60608301525060806106cc848285016105f7565b60808301525060a06106e0848285016105cd565b60a08301525060c06106f484828501610729565b60c08301525060e0610708848285016105e2565b60e08301525092915050565b60008135905061072381610c42565b92915050565b60008135905061073881610c59565b92915050565b60006020828403121561075057600080fd5b600082013567ffffffffffffffff81111561076a57600080fd5b61077684828501610636565b91505092915050565b600061078a826108d4565b61079481856108df565b93506107a4818560208601610a3e565b6107ad81610b2f565b840191505092915050565b60006107c3826108d4565b6107cd81856108f0565b93506107dd818560208601610a3e565b80840191505092915050565b60006107f66009836108f0565b915061080182610b40565b600982019050919050565b60006108196064836108f0565b915061082482610b69565b606482019050919050565b600061083a8261080c565b915061084682846107b8565b9150610851826107e9565b915081905092915050565b60006020820190508181036000830152610876818461077f565b905092915050565b6000610888610899565b90506108948282610a71565b919050565b6000604051905090565b600067ffffffffffffffff8211156108be576108bd610b00565b5b6108c782610b2f565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061090682610a18565b915061091183610a18565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561094657610945610aa2565b5b828201905092915050565b600061095c82610a18565b915061096783610a18565b92508261097757610976610ad1565b5b828204905092915050565b600061098d82610a18565b915061099883610a18565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156109d1576109d0610aa2565b5b828202905092915050565b60006109e7826109f8565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015610a5c578082015181840152602081019050610a41565b83811115610a6b576000848401525b50505050565b610a7a82610b2f565b810181811067ffffffffffffffff82111715610a9957610a98610b00565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f222f3e3c2f7376673e0000000000000000000000000000000000000000000000600082015250565b7f3c7376672076696577426f783d2230203020323030203330302220786d6c6e7360008201527f3d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e3c7260208201527f6563742077696474683d2232303022206865696768743d22333030222066696c60408201527f6c3d222300000000000000000000000000000000000000000000000000000000606082015250565b610c0d816109dc565b8114610c1857600080fd5b50565b610c24816109ee565b8114610c2f57600080fd5b50565b60058110610c3f57600080fd5b50565b610c4b81610a18565b8114610c5657600080fd5b50565b610c6281610a22565b8114610c6d57600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122025f44756896409cbec096a1b7995addacadd92e87ce0a7c9a1ee336b7e3ed4a764736f6c63430008040033";

type WagerTicketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WagerTicketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WagerTicket__factory extends ContractFactory {
  constructor(...args: WagerTicketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WagerTicket> {
    return super.deploy(overrides || {}) as Promise<WagerTicket>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): WagerTicket {
    return super.attach(address) as WagerTicket;
  }
  override connect(signer: Signer): WagerTicket__factory {
    return super.connect(signer) as WagerTicket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WagerTicketInterface {
    return new utils.Interface(_abi) as WagerTicketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WagerTicket {
    return new Contract(address, _abi, signerOrProvider) as WagerTicket;
  }
}
